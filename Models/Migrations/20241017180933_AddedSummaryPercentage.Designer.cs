// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Models;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Models.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241017180933_AddedSummaryPercentage")]
    partial class AddedSummaryPercentage
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Models.IndexComponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<float>("DowWeight")
                        .HasColumnType("real");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ListedIndexes")
                        .HasColumnType("integer");

                    b.Property<float>("NasdaqWeight")
                        .HasColumnType("real");

                    b.Property<string>("Sector")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<float>("SnPWeight")
                        .HasColumnType("real");

                    b.Property<string>("SubSector")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.HasKey("Id");

                    b.HasIndex("Ticker")
                        .IsUnique();

                    b.ToTable("IndexComponents");
                });

            modelBuilder.Entity("Models.PriceByDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("AdjClose")
                        .HasColumnType("double precision");

                    b.Property<double>("Close")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("High")
                        .HasColumnType("double precision");

                    b.Property<double>("Low")
                        .HasColumnType("double precision");

                    b.Property<double>("Open")
                        .HasColumnType("double precision");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<double>("Volume")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("Ticker");

                    b.ToTable("PriceByDate");
                });

            modelBuilder.Entity("Models.SelectedTicker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("AnnualPercentGain")
                        .HasColumnType("double precision");

                    b.Property<double>("Close")
                        .HasColumnType("double precision");

                    b.Property<string>("CompanyName")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("HalfYearlyPercentGain")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("QuarterYearlyPercentGain")
                        .HasColumnType("double precision");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.HasKey("Id");

                    b.HasIndex("Ticker");

                    b.ToTable("SelectedTickers");
                });

            modelBuilder.Entity("Models.SlopeSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Period")
                        .HasColumnType("integer");

                    b.Property<float>("SlopeChangePercentage")
                        .HasColumnType("real");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SlopeSummaries");
                });

            modelBuilder.Entity("Models.TickerSlope", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Period")
                        .HasColumnType("integer");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Ticker" }, "Ticker_IX");

                    b.ToTable("TickerSlopes");
                });

            modelBuilder.Entity("Models.SlopeSummary", b =>
                {
                    b.OwnsOne("Models.ComputedSlope", "PeriodEnd", b1 =>
                        {
                            b1.Property<Guid>("SlopeSummaryId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("Date")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<double?>("Intercept")
                                .HasColumnType("double precision");

                            b1.Property<decimal?>("Line")
                                .HasColumnType("numeric");

                            b1.Property<double?>("RSquared")
                                .HasColumnType("double precision");

                            b1.Property<double?>("Slope")
                                .HasColumnType("double precision");

                            b1.Property<double?>("StdDev")
                                .HasColumnType("double precision");

                            b1.HasKey("SlopeSummaryId");

                            b1.ToTable("SlopeSummaries");

                            b1.ToJson("PeriodEnd");

                            b1.WithOwner()
                                .HasForeignKey("SlopeSummaryId");
                        });

                    b.OwnsOne("Models.ComputedSlope", "PeriodStart", b1 =>
                        {
                            b1.Property<Guid>("SlopeSummaryId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("Date")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<double?>("Intercept")
                                .HasColumnType("double precision");

                            b1.Property<decimal?>("Line")
                                .HasColumnType("numeric");

                            b1.Property<double?>("RSquared")
                                .HasColumnType("double precision");

                            b1.Property<double?>("Slope")
                                .HasColumnType("double precision");

                            b1.Property<double?>("StdDev")
                                .HasColumnType("double precision");

                            b1.HasKey("SlopeSummaryId");

                            b1.ToTable("SlopeSummaries");

                            b1.ToJson("PeriodStart");

                            b1.WithOwner()
                                .HasForeignKey("SlopeSummaryId");
                        });

                    b.Navigation("PeriodEnd")
                        .IsRequired();

                    b.Navigation("PeriodStart")
                        .IsRequired();
                });

            modelBuilder.Entity("Models.TickerSlope", b =>
                {
                    b.OwnsMany("Models.ComputedSlope", "SlopeResults", b1 =>
                        {
                            b1.Property<Guid>("TickerSlopeId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<DateTime>("Date")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<double?>("Intercept")
                                .HasColumnType("double precision");

                            b1.Property<decimal?>("Line")
                                .HasColumnType("numeric");

                            b1.Property<double?>("RSquared")
                                .HasColumnType("double precision");

                            b1.Property<double?>("Slope")
                                .HasColumnType("double precision");

                            b1.Property<double?>("StdDev")
                                .HasColumnType("double precision");

                            b1.HasKey("TickerSlopeId", "Id");

                            b1.ToTable("TickerSlopes");

                            b1.ToJson("SlopeResults");

                            b1.WithOwner()
                                .HasForeignKey("TickerSlopeId");
                        });

                    b.Navigation("SlopeResults");
                });
#pragma warning restore 612, 618
        }
    }
}
